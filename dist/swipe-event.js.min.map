{"version":3,"sources":["swipe-event/src/swipe-event.js"],"names":["SwipeEvent","_ref","arguments","length","undefined","element","_ref$threshold","threshold","_ref$allowedTime","allowedTime","itemSelector","activeSelector","document","querySelector","HTMLElement","Error","swiping","clicked","defaults","direction","duration","distance","x","y","start","time","touch","end","swipe","JSON","parse","stringify","eventCallbacks","e","preventDefault","changedTouches","pageX","pageY","Date","move","abort","getTime","Math","sqrt","pow","abs","swipeEvent","window","CustomEvent","createEvent","initCustomEvent","detail","dispatchEvent","clickedElement","elementFromPoint","clickEvent","initMouseEvent","focus","this","attach","addEventListener","passive","detach","removeEventListener"],"mappings":"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","file":"swipe-event.js","sourcesContent":["\"use strict\";\n\n/**\n * Utility wrapper to expose a simple way to handle swipe events.\n *\n * @param {object} param\n * @param {string|HTMLElement} param.element Container of the swipable elements.\n * @param {number} param.threshold Minimum spatial distance that makes valid a swipe.\n * @param {number} param.allowedTime Maximum temporal distance that makes valid a swipe.\n * @param {string} param.itemSelector Selector of the swipable elements.\n * @param {string} param.itemSelector Selector for the urrent swipable element.\n *\n * @throws Will throw an error if `element` is invalid.\n * @throws Will throw an error if `itemSelector` isn't provided.\n * @throws Will throw an error if `activeSelector` isn't provided.\n *\n * @version 2.0.0\n *\n * @author Gennaro Landolfi <gennarolandolfi@codedwork.it>\n * @contributor Guido Belluomo\n *\n */\nfunction SwipeEvent() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      element = _ref.element,\n      _ref$threshold = _ref.threshold,\n      threshold = _ref$threshold === void 0 ? 85 : _ref$threshold,\n      _ref$allowedTime = _ref.allowedTime,\n      allowedTime = _ref$allowedTime === void 0 ? 300 : _ref$allowedTime,\n      itemSelector = _ref.itemSelector,\n      activeSelector = _ref.activeSelector;\n\n  if (typeof element === 'string') {\n    element = document.querySelector(element);\n  }\n\n  if (!(element instanceof HTMLElement)) {\n    throw new Error('The touchable element is invalid.');\n  }\n\n  if (!itemSelector) {\n    throw new Error('An item selector must be provided. Items must be child of ' + element + '.');\n  }\n\n  if (!activeSelector) {\n    throw new Error('An active selector must be provided. It must be applicable to items.');\n  }\n  /**\n   * Determines if the element is swiping or not.\n   *\n   * @type {boolean}\n   *\n   * @private\n   */\n\n\n  var swiping = false;\n  /**\n   * Determines if a child has been clicked.\n   *\n   * @type {boolean}\n   *\n   * @private\n   */\n\n  var clicked = false;\n  /**\n   * Sets the default `swipe` object.\n   *\n   * @property {object} defaults\n   * @property {string|null} defaults.direction Direction of the swipe. Can be 'left', 'right', 'down' or 'up'.\n   * @property {duration} defaults.duration Duration of the swipe.\n   * @property {object} defaults.distance Distance covered by the finger while swiping.\n   * @property {number} defaults.distance.x Distance in horizontal direction.\n   * @property {number} defaults.distance.y Distance in vertical direction.\n   * @property {object} defaults.start Details about the start of the swipe.\n   * @property {number} defaults.start.x Horizontal coordinate of the start point.\n   * @property {number} defaults.start.y Vertical coordinate of the start point.\n   * @property {Date} defaults.start.time Date instance of start point.\n   * @property {Date} defaults.start.touch Touch event for the start point.\n   * @property {object} defaults.end Details about the end of the swipe.\n   * @property {number} defaults.end.x Horizontal coordinate of the end point.\n   * @property {number} defaults.end.y Vertical coordinate of the end point.\n   * @property {Date} defaults.end.time Date instance of end point.\n   * @property {Date} defaults.end.touch Touch event for the end point.\n   *\n   * @private\n   */\n\n  var defaults = {\n    direction: undefined,\n    // left; right; down; up;\n    duration: 0,\n    distance: {\n      x: 0,\n      y: 0\n    },\n    start: {\n      x: 0,\n      y: 0,\n      time: undefined,\n      // new Date()\n      touch: undefined\n    },\n    end: {\n      x: 0,\n      y: 0,\n      time: undefined,\n      // new Date()\n      touch: undefined\n    }\n  }; // Object cloning\n\n  /**\n   * Sets the default `swipe` object.\n   *\n   * @property {object} defaults\n   * @property {string|null} defaults.direction Direction of the swipe. Can be 'left', 'right', 'down' or 'up'.\n   * @property {duration} defaults.duration Duration of the swipe.\n   * @property {object} defaults.distance Distance covered by the finger while swiping.\n   * @property {number} defaults.distance.x Distance in horizontal direction.\n   * @property {number} defaults.distance.y Distance in vertical direction.\n   * @property {object} defaults.start Details about the start of the swipe.\n   * @property {number} defaults.start.x Horizontal coordinate of the start point.\n   * @property {number} defaults.start.y Vertical coordinate of the start point.\n   * @property {Date} defaults.start.time Date instance of start point.\n   * @property {Date} defaults.start.touch Touch event for the start point.\n   * @property {object} defaults.end Details about the end of the swipe.\n   * @property {number} defaults.end.x Horizontal coordinate of the end point.\n   * @property {number} defaults.end.y Vertical coordinate of the end point.\n   * @property {Date} defaults.end.time Date instance of end point.\n   * @property {Date} defaults.end.touch Touch event for the end point.\n   *\n   * @private\n   */\n\n  var swipe = JSON.parse(JSON.stringify(defaults));\n  var eventCallbacks = {\n    start: function start(e) {\n      if (!element.querySelector(itemSelector + activeSelector)) {\n        e.preventDefault();\n        clicked = false;\n\n        if (!swiping) {\n          swipe = defaults;\n          swipe.start.touch = e.changedTouches[0];\n          swipe.start.x = swipe.start.touch.pageX;\n          swipe.start.y = swipe.start.touch.pageY;\n          swipe.distance.x = 0;\n          swipe.distance.y = 0;\n          swipe.start.time = new Date();\n          swiping = true;\n        }\n      }\n    },\n    move: function move(e) {\n      if (!element.querySelector(itemSelector + activeSelector)) {\n        e.preventDefault();\n\n        if (!swiping) {\n          swipe.direction = null;\n        }\n      }\n    },\n    abort: function abort(e) {\n      if (!element.querySelector(itemSelector + activeSelector)) {\n        e.preventDefault();\n        swiping = false;\n        swipe = defaults;\n      }\n    },\n    end: function end(e) {\n      if (!element.querySelector(itemSelector + activeSelector)) {\n        e.preventDefault();\n\n        if (swiping) {\n          swipe.end.touch = e.changedTouches[0];\n          swipe.end.x = swipe.end.touch.pageX;\n          swipe.end.y = swipe.end.touch.pageY;\n          swipe.end.time = new Date();\n          swipe.duration = swipe.end.time.getTime() - swipe.start.time.getTime();\n          swipe.distance.x = swipe.end.x - swipe.start.x;\n          swipe.distance.y = swipe.end.y - swipe.start.y;\n\n          if (swipe.duration <= allowedTime) {\n            if (Math.sqrt(Math.pow(swipe.distance.x, 2) + Math.pow(swipe.distance.y, 2)) >= threshold) {\n              if (Math.abs(swipe.distance.x) >= Math.abs(swipe.distance.y)) {\n                // 2nd condition for horizontal swipe met\n                swipe.direction = swipe.distance.x < 0 ? 'left' : 'right'; // if dist traveled is negative, it indicates left swipe\n              }\n\n              if (Math.abs(swipe.distance.y) >= Math.abs(swipe.distance.x)) {\n                // 2nd condition for vertical swipe met\n                swipe.direction = swipe.distance.y < 0 ? 'up' : 'down'; // if dist traveled is negative, it indicates up swipe\n              }\n\n              if (swipe.direction && swipe.direction !== null && swipe.distance.x !== 0 && swipe.distance.y !== 0) {\n                var swipeEvent = null;\n\n                if (typeof window.CustomEvent !== 'function') {\n                  swipeEvent = document.createEvent('swipe');\n                  swipeEvent.initCustomEvent('swipe', false, false, swipe);\n                } else {\n                  swipeEvent = new CustomEvent('swipe', {\n                    detail: swipe\n                  });\n                }\n\n                element.dispatchEvent(swipeEvent);\n              } else {\n                clicked = true;\n              }\n            } else {\n              clicked = true;\n            }\n          }\n\n          swiping = false;\n        } else {\n          clicked = true;\n        }\n\n        if (clicked) {\n          var clickedElement = document.elementFromPoint(swipe.end.touch.pageX, swipe.end.touch.pageY);\n\n          if (clickedElement !== null) {\n            var clickEvent = document.createEvent('MouseEvent');\n            clickEvent.initMouseEvent('click', true,\n            /* bubble */\n            true,\n            /* cancelable */\n            window, null, swipe.end.touch.pageX, swipe.end.touch.pageY, 0, 0,\n            /* coordinates */\n            false, false, false, false,\n            /* modifier keys */\n            0,\n            /*left*/\n            null);\n            clickedElement.dispatchEvent(clickEvent);\n            clickedElement.focus();\n          }\n\n          clicked = false;\n        }\n\n        swipe = defaults;\n      }\n    }\n  };\n\n  this.attach = function () {\n    element.addEventListener('touchstart', eventCallbacks.start, {\n      passive: false\n    });\n    element.addEventListener('touchmove', eventCallbacks.move, {\n      passive: false\n    });\n    element.addEventListener('touchabort', eventCallbacks.abort, {\n      passive: false\n    });\n    element.addEventListener('touchend', eventCallbacks.end, {\n      passive: false\n    });\n  };\n\n  this.detach = function () {\n    element.removeEventListener('touchstart', eventCallbacks.start, {\n      passive: false\n    });\n    element.removeEventListener('touchmove', eventCallbacks.move, {\n      passive: false\n    });\n    element.removeEventListener('touchabort', eventCallbacks.abort, {\n      passive: false\n    });\n    element.removeEventListener('touchend', eventCallbacks.end, {\n      passive: false\n    });\n  };\n}"]}